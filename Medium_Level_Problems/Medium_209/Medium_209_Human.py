#209. Minimum Size Subarray Sum
#https://leetcode.com/problems/minimum-size-subarray-sum/
from typing import List
import time
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        n = len(nums)
        ans = n + 1  # Initialize the answer to an impossible large value
        s = 0  # This will hold the sum of the current subarray
        j = 0  # The start index of the current subarray
        
        for i in range(n):
            s += nums[i]  # Add the current number to the sum
            
            # When the sum is greater than or equal to the target, try to shrink the subarray
            while s >= target:
                ans = min(ans, i - j + 1)  # Update the answer with the smallest length
                s -= nums[j]  # Subtract the element at the start of the window
                j += 1  # Move the start of the window to the right
            
        # If ans was updated, it means we found a valid subarray, otherwise return 0
        return ans if ans <= n else 0

# Define the test cases
test_cases = [
    ([1965, 6790, 1765, 1619, 6111, 7031, 3299, 7684, 2293, 5196, 1605, 5314], 1970, 1),  # Expected output: 3
    ([7873, 2874, 5187, 8076, 1294, 1027, 6491, 6330, 3878, 8552, 1029, 8860, 4730, 7474, 9778, 8841, 6066, 721, 8272, 1127, 2584, 5164, 7149, 6699, 4110, 5938, 4237, 6036, 6359, 8676, 2466, 930, 3786, 9608, 7718, 5109, 6492, 4318, 2501, 7729, 9910, 1850, 592, 2594, 9322, 6144, 1961, 6396, 770, 1772, 1306, 243, 6297, 3859, 5668, 4984, 4517, 3107, 3232, 5904, 9208, 5470, 2811, 4621, 8111, 9817, 3555, 1909, 4657, 7700, 3387, 5297, 5018, 8838, 6108, 6172, 7785, 3697, 137, 4422, 8061, 5986, 8637, 3062, 4468, 4533, 8483, 3286], 3286, 1),  
    ([1729, 1705, 5529, 7282, 1323, 169, 7232, 8992, 5848, 7888, 7807, 6313, 7470, 8214, 4381, 6790, 3926, 3927, 4708, 4557, 2473, 9154, 8963, 7855, 1582, 1626, 8750, 2183, 9710, 1044, 3586, 220, 2398, 6008, 8340, 8230, 5132, 9247, 9450, 7127, 4097, 4428, 5953, 9536, 2449, 6302, 3899, 8265, 6635, 5308, 7881, 8899, 6646, 9385, 9065, 9530, 3784, 936, 4903, 1164, 4241, 7307, 4968, 6158, 6191, 8888, 6075, 9557, 4475, 4690, 1754, 6143, 6180, 3161, 4820, 4420, 302, 6377, 3921, 6281, 5235, 9332, 4360, 986, 1334, 3519, 3893, 1766], 320326014, 0),  
    ([3499, 9995, 4351, 7837, 1401, 6421, 6674, 6132, 2310, 7818, 2560, 9753, 2881, 212, 563, 320, 3926, 5652, 7080, 2466, 7788, 6573, 4528, 8012, 1074, 9415, 248, 2015, 3727, 4750, 7831, 9586, 8657, 3701, 8959, 3047, 8793, 5842, 7825, 2719, 910, 1208, 508, 7491, 3946, 4394, 3382, 8929, 2912], 365161483, 0),  
    ([7650, 9023, 8847, 6247, 8805, 720, 1995, 4008, 6853, 9827, 6176, 6678, 6567, 4555, 8390, 4318, 9872, 3868, 8253, 2923, 3923, 9684, 8085, 3043, 5161, 2916, 513, 1705, 979, 3806, 4039, 2195, 4336, 5605, 3277, 5184], 52151376, 0), 
    ([3289, 4881, 4706, 30, 2768, 6390, 3954, 8320, 1593, 3286, 6130, 7027, 1047, 3451, 2360, 2944, 9396, 1732, 3859, 6948, 2913, 469, 1056, 7639, 6768, 563, 9797, 3505, 2538, 6447, 640, 166, 2597, 2961, 3000, 6329, 7347, 9326, 889, 294, 6062, 5696, 2638, 9939, 5262, 868, 9793, 4391, 4167, 3837, 2658, 5931, 2272, 206, 5885, 7571, 9211, 713, 9351, 7517, 528, 3667], 261896556, 0), 
    ([5491, 1229, 6649, 9042, 1792, 847, 5829, 9499, 1849, 3243, 1066, 6150, 3857, 5229, 8194, 3155, 3526, 5444, 9795, 6182, 8775, 1321, 9709, 9224, 6829, 6285, 3665, 7006, 6156, 1434, 4877, 4676, 9161, 806, 2302, 6065, 1419, 4052, 5792, 2968, 1479, 8890, 7224, 7474, 7452, 5169, 5952, 5936, 8121, 9814, 4744, 3636, 2762, 8695, 2709, 3632, 5825], 61257764, 0),  
    ([2765, 6519, 1304, 6635, 3514, 2139, 1755, 6848, 9691, 8780, 7035, 2676, 2186, 4631, 5178, 2622, 1016, 1349, 2028, 1813, 2668, 3724, 1536, 3703, 3670, 5390, 2471, 9248, 2292, 9251, 3579, 9804, 7528, 6184, 8698, 7637, 1498, 1451, 1594, 4554, 5612, 3971, 6134, 1513, 1294, 8322, 4649, 2260, 8856, 1092, 6633, 9796, 1168, 5797, 4512, 1428, 3985, 2767], 194309028, 0), 
    ([6885, 2356, 9745, 2640, 1773, 5109, 9206, 5279, 9504, 1704, 2332, 6250, 9439, 3486, 6251, 2264, 2383, 1869, 5026, 7754, 3548, 3834, 5319, 4010, 7379, 6461, 9284, 6693, 9578, 1987, 6164, 3070, 3202, 3286, 4792, 1233, 7584, 2318, 1285, 3317, 2995, 5727, 1460, 5945, 4914, 5987, 7672, 3692, 1604, 4813, 2684, 1501, 2433, 3981, 2486, 6672, 3685, 5992, 5424, 1258, 8013], 295659942, 0), 
    ([3926, 5061, 5614, 5276, 979, 5298, 9355, 173, 8990, 8849, 3908, 1339, 2310, 3822, 4239, 4982, 529, 4809, 8371, 6583, 4192, 1049, 3838, 7164, 5452, 7969, 9379, 3270, 8011, 922, 3032, 1212, 4234, 6423, 1108, 7564, 7170, 6513, 491, 2119, 8812, 9906, 9501, 1537, 7335, 4485, 105, 5849, 5370, 5544, 9162, 8863, 2222, 6025, 6646, 8253, 8545, 2050, 379, 1390, 5217, 4735, 9380, 4357, 8444, 7732, 3143, 8368, 1979, 9110, 1091, 7246, 6092, 3253, 5110, 1397, 9972, 5019, 6935, 4226, 9153, 5478, 5782, 4800, 8749], 777428822,0)
]
solution = Solution()
total_time = 0.0

for idx, (nums, target, expected) in enumerate(test_cases, 1):
    start_time = time.perf_counter()
    result = solution.minSubArrayLen(target, nums)
    end_time = time.perf_counter()
    execution_time = end_time - start_time
    total_time += execution_time

    assert result == expected, f"Test failed for nums={nums}. Expected {expected}, got {result}"
    print(f"Test {idx} passed for nums={nums}. Execution time: {execution_time:.12f} seconds")

print(f"\nAll test cases passed successfully!")
print(f"Total execution time for all test cases: {total_time:.12f} seconds")
#153. Find Minimum in Rotated Sorted Array
#https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
from typing import List
import time

class Solution:
    def findMin(self, nums: List[int]) -> int:
        # If the array is not rotated (already sorted), return the first element
        if nums[0] <= nums[-1]:
            return nums[0]

        left, right = 0, len(nums) - 1

        while left < right:
            mid = (left + right) // 2

            # If mid element is greater than or equal to the first element,
            # then the minimum is in the right half
            if nums[mid] >= nums[0]:
                left = mid + 1
            else:
                right = mid  # minimum could be mid itself

        return nums[left]

# Define the test cases: List of tuples (input_list, expected_minimum)
test_cases = [
    ([2677, 2789, 2877, 3076, 3099, 3305, 3353, 3439, 3840, 3965, 4360, 4398, 4694, 4730, -4764, -4700, -4634, -4427, -4199, -4112, -3842, -3032, -2999, -2783, -2738, -2406, -1428, -1303, -656, -194, -178, 447, 635, 943, 1163, 1559, 1674, 1686, 2405], -4764),
    ([338, 482, 516, 694, 761, 815, 902, 917, 923, 1077, 1194, 1284, 1298, 1372, 1586, 1961, 2110, 2630, 2735, 2843, 2981, 3510, 3615, 3755, 3783, 3789, 4155, 4403, 4426, 4472, 4681, 4777, 4807, 4873, -4998, -4972, -4832, -4828, -4787, -4660, -4604, -4381, -4362, -3983, -3798, -3763, -3732, -3543, -3437, -3427, -3239, -3091, -3003, -2898, -2783, -2696, -2602, -2561, -2384, -2113, -2110, -1557, -1264, -1143, -1131, -887, -336, -335, -193], -4998),
    ([-2290, -1963, -1906, -1872, -1571, -1459, -1267, -1071, -968, -923, -904, -845, -685, -653, -477, -230, -215, -162, -62, -26, 38, 72, 150, 177, 339, 357, 415, 866, 962, 1262, 1280, 1402, 1900, 1933, 1953, 2047, 2117, 2172, 2288, 2470, 2526, 2527, 2541, 2583, 2847, 2900, 2910, 2983, 3106, 3138, 3371, 3807, 3840, 3946, 4015, 4119, 4316, 4378, 4426, 4428, 4486, 4583, 4591, 4610, 4998, -4791, -4790, -4724, -4457, -4376, -4352, -4137, -4020, -3979, -3877, -3860, -3798, -3729, -3638, -3602, -3536, -3519, -3380, -3263, -3204, -3034, -2756, -2716, -2710, -2577, -2536, -2352, -2339], -4791),
    ([333, 344, 425, 595, 608, 811, 1058, 1141, 1211, 1297, 1352, 1423, 1724, 1741, 1973, 2215, 2336, 2347, 2692, 2715, 2810, 2894, 2934, 2959, 3475, 3767, 4046, 4363, 4710, 4897, 4946, -4899, -4474, -4434, -4432, -4430, -4388, -4220, -4210, -4018, -3992, -3922, -3907, -3866, -3180, -2778, -2577, -2480, -1949, -1870, -1043, -681, -651, -319, -91, -67, 266, 291], -4899),
    ([4324, 4410, -4921, -4590, -4537, -4526, -4264, -3780, -3404, -3182, -3002, -2773, -2572, -2260, -2173, -2096, -1807, -1783, -1230, -1229, -1108, -944, -494, -21, 29, 58, 226, 404, 681, 746, 939, 954, 1215, 1834, 1916, 2717, 2761, 3275, 3315, 3352, 3794, 3982, 4212, 4223, 4280], -4921),
    ([-3558, -3257, -2901, -2851, -2707, -2625, -2531, -2313, -2304, -2147, -1968, -1328, -1070, -581, -526, -478, -169, -148, -114, 350, 479, 742, 749, 1029, 1053, 1620, 1635, 1735, 2033, 2063, 2158, 2216, 2218, 2283, 2407, 3083, 3417, 3490, 3503, 3614, 4098, 4565, 4607, 4739, 4845, 4947, -4993, -4812, -4534, -4533, -4380, -4125, -3880, -3702], -4993),
    ([4536, 4649, 4723, 4769, 4792, -4768, -4740, -4539, -4538, -4057, -3918, -3496, -3244, -2752, -2697, -2532, -2501, -2056, -1916, -1719, -1555, -1147, -750, -742, 384, 572, 597, 1106, 1137, 1178, 1244, 1271, 1318, 1855, 2192, 2204, 2212, 2286, 2347, 2921, 3300, 3457, 3970, 4384, 4452], -4768),
    ([-4656, -4059, -3773, -3033, -2124, -1904, -1505, -1426, -151, 502, 1727, 2526, 3333], -4656),
    ([4766, -4821, -4446, -3756, -2352, -728, -437, 122, 719, 807, 960, 1588, 1904, 2638], -4821),
    ([-1412, -1411, -1353, -1159, -711, -656, -619, 134, 207, 437, 592, 771, 1027, 1047, 1209, 1224, 1287, 1360, 1526, 1749, 2234, 3746, 4525, -4382, -4070, -3614, -3474, -3169, -2969, -2816, -2064, -2043, -1967, -1832], -4382),
    ([-4721, -4693, -4646, -4634, -4566, -4526, -3963, -3699, -3423, -3071, -2977, -2661, -2409, -2169, -2064, -1974, -1782, -1759, -1725, -1717, -1616, -1514, -1492, -1477, -846, -812, -791, -528, -385, -373, -367, -305, -32, 4, 47, 659, 672, 781, 862, 1258, 1290, 1677, 1810, 1819, 1936, 1978, 2057, 2082, 2087, 2247, 2411, 2459, 2517, 2605, 3035, 3053, 3088, 3281, 3569, 3915, 4064, 4137, 4151, 4207, 4264, 4438, 4531, 4561, 4565, 4579, 4619, 4641, 4692, 4841, -4973, -4841, -4805, -4765, -4731], -4973),
]
solution = Solution()
total_time = 0

for idx, (nums, expected) in enumerate(test_cases, 1):
    start_time = time.perf_counter()
    result = solution.findMin(nums)
    end_time = time.perf_counter()
    execution_time = end_time - start_time
    total_time += execution_time
    assert result == expected, f"Test failed for nums={nums}. Expected {expected}, got {result}"
    print(f"Test {idx} passed for nums={nums}. Execution time: {execution_time:.12f} seconds")

print(f"\nAll test cases passed successfully!")
print(f"Total execution time for all test cases: {total_time:.12f} seconds")

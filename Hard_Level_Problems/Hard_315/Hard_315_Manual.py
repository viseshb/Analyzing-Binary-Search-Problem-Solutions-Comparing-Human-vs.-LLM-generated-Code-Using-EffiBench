#315. Count of Smaller Numbers After Self
#https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/

from bisect import bisect_left
from typing import List
import time


class BinaryIndexedTree:
    def __init__(self, n):
        self.n = n
        self.c = [0] * (n + 1)

    @staticmethod
    def lowbit(x):
        return x & -x

    def update(self, x, delta):
        while x <= self.n:
            self.c[x] += delta
            x += BinaryIndexedTree.lowbit(x)

    def query(self, x):
        s = 0
        while x > 0:
            s += self.c[x]
            x -= BinaryIndexedTree.lowbit(x)
        return s


class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        alls = sorted(set(nums))
        m = {v: i for i, v in enumerate(alls, 1)}
        tree = BinaryIndexedTree(len(m))
        ans = []
        for v in nums[::-1]:
            x = m[v]
            tree.update(x, 1)
            ans.append(tree.query(x - 1))
        return ans[::-1]
                  
    
sol = Solution()

test_cases = [
    ([572, -9675, 8910, -5877, 5194, -259, 1414, 4910, -347, 3240, 1427, 1535, -7903, -7225, -7186, -7970, 1369, 329, 9609, 1250, -7387, 5394, 2153, -931, -7105, 8873, -4881, -6746, -6388, -6507, -9178, -4612, -2556, 5836, -4518, 6620, 7761, 3, 4471, 2024, -7295, 5138, -3828, 8829, -1793, 4028, -708, -2876],
     [26, 0, 44, 11, 36, 21, 25, 32, 20, 28, 24, 24, 2, 4, 4, 1, 19, 17, 29, 17, 1, 21, 17, 13, 2, 22, 5, 2, 3, 2, 0, 1, 4, 11, 1, 10, 10, 5, 7, 5, 0, 5, 0, 4, 1, 2, 1, 0]),

    ([4512, -2207, -4730, 8623, -3112, 1318, 525, 1391, -6536, 3375, 7160, 8609, 4417, 6998, -2562, 5248, 1015, -3899, -73, 8510, 6616, -5663, 6891, -1119, -1576, 6070, 2166, -5816, 5374, 572, -2559, -6030, 9027, 606, 9985, 7089, -547, 698, 9599, 8888, -3876, -1199, 4719, -6851, -1362, -2698, -6310, -4034, 63, 3355, 1554, 6477, 4093, -2716, -6218, -686],
     [38, 16, 7, 48, 10, 27, 22, 26, 1, 28, 39, 40, 29, 36, 11, 29, 23, 7, 17, 32, 29, 5, 28, 13, 10, 24, 19, 4, 21, 14, 8, 3, 21, 12, 21, 18, 10, 11, 17, 16, 4, 7, 12, 0, 5, 4, 0, 1, 3, 4, 3, 4, 3, 1, 0, 0]),

    ([-2611, -8650, 7504, 3778, -1417, -3078],
     [2, 0, 3, 2, 1, 0]),

    ([-1246, 9733, 9213, 1509, 517, -7052, 1990, 786, -7543, -4733, -1737, -7556, -3432, -7244, 3641, 9536, 8474, -1051, 1257, 5270, -444, -6971, -8243, -5296, 7297, 210, 9913, -3402, -1391, -4264, 9370, -76, 9236, -2048, 5694, -1313, 1837, 1679, -8815, 4281, 894, 1584, -1442, 5435, 2081, -3491, 6884, -4710, -3821, 2533, 3626, 7353, 9185, 9876, 9919, 8534, 7809, -4290, 6911, -9557, -3887, 7496, -5393, -4913, -9379, -7021, 7164, -1691, -22, 3269, -5813, 1363, -532, -5785, -3368, 7497, -6274, -4636, 4963, -1257, 2026, 8561, -2811, -7226, -6444, -8889, -8369], 
     [39, 82, 78, 50, 45, 10, 51, 44, 7, 18, 30, 6, 24, 6, 49, 68, 62, 32, 38, 49, 33, 8, 5, 12, 50, 32, 59, 20, 25, 16, 54, 27, 52, 21, 40, 23, 30, 29, 3, 33, 25, 26, 21, 31, 26, 17, 29, 12, 15, 23, 24, 27, 32, 32, 32, 30, 29, 13, 24, 0, 12, 23, 9, 9, 0, 3, 18, 10, 12, 14, 5, 11, 10, 5, 6, 10, 4, 4, 7, 5, 5, 5, 4, 2, 2, 0, 0]),

    ([3589, 4072, 3047],
     [1, 1, 0]),

    ([-9250, 6716, 484, 1673, -4659, -561, -2466, -6675, 101, -6170, -2956, -8454, 2379, -5460, -1510, -2389, -5860, 2548, -867, -5269, -1938, 2883, 5408, -3552, 2594, 1571, -5813, 5845, 405],
     [0, 27, 18, 19, 7, 14, 9, 1, 12, 1, 6, 0, 11, 2, 6, 4, 0, 7, 4, 1, 2, 5, 5, 1, 3, 2, 0, 1, 0]),

    ([6011, -3966],
     [1, 0]),

    ([-5869, -1021, -8336, -5383, -1797, -5839, -9246, -3798, 4162, 1311, -1497, -7202, -456, 2998, -777, 5703, 5094, 5839, -573, 2214, -1227, 6584, 491, 6437, 2946, -4226, 9955, -9997, -5995, 1871, -4864, 8792, 2992, -357, 3609, -1974, -3788, 4295, -1514, 2559, 7463, 9314, -6955, -3827, -1300, -8416, 9443, -5127, -6717, -1328],
     [8, 23, 3, 8, 15, 7, 1, 10, 30, 22, 13, 2, 17, 24, 15, 26, 25, 25, 15, 18, 14, 23, 15, 21, 17, 7, 23, 0, 3, 12, 4, 16, 12, 10, 11, 6, 5, 9, 5, 7, 7, 7, 1, 3, 4, 0, 3, 1, 0, 0]),

    ([5052, 1041, 1695, 2380, 1721, 270, -5422, 4268],
     [7, 2, 2, 3, 2, 1, 0, 0]),

    ([-5307, -6771, -8581, 2741, 2890, -6627, 1257, 5268, -3936, 8289, 2961, 9478, 2970, -4930, -2011, 4443, -5037, -3270, 6898, -7846, 7140, -9501, 8340, 8892, -1407, 5987, 2598, 914, -5072, 4710, 3955, -2087, -172, 3754],
     [5, 3, 1, 15, 15, 2, 12, 19, 5, 21, 12, 22, 12, 4, 6, 12, 3, 3, 12, 1, 11, 0, 10, 10, 2, 8, 4, 3, 0, 4, 3, 0, 0, 0])
]


total_time = 0.0
result = None

for nums, expected in test_cases:
    start_time = time.perf_counter()
    result = sol.countSmaller(nums)
    end_time = time.perf_counter()
    execution_time = end_time - start_time
    total_time += execution_time
    assert result == expected, f"Test failed for nums={nums}. Expected {expected}, got {result}"
    print(f"Test passed for nums={nums}. Execution time: {execution_time:.12f} seconds")

print(f"\nAll test cases passed successfully!")
print(f"Total execution time for all test cases: {total_time:.12f} seconds")  
#862. Shortest Subarray with Sum at Least K
#https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/

import time

from typing import List

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        left, right = 1, n
        result = float('inf')

        while left <= right:
            mid = (left + right) // 2
            found = False
            for i in range(n - mid + 1):
                sub_sum = sum(nums[i:i + mid])
                if sub_sum >= k:
                    result = min(result, mid)
                    found = True
                    break

            if found:
                right = mid - 1
            else:
                left = mid + 1

        return result if result != float('inf') else -1
    

test_cases = [
    ([50773, 25587, -8352, -90909, -50602, -20879, 86889, -63112, 82253, -98005, 96631, -10550, 8547, -64817, -2649, 96177, -87767, -31072, -32758, -44994, 53230, 57312, 25299, -74587, -86563, -90812, -97146, -13157, 15496, -34325, 94722, 45011, 96512, 71182, 90662, -37602, 57970, -38153, 9022, -72176, -71923, 58399, 49333, 3301, -311, 70601, 74763, -7895, -17392, -48027, -17537, 91599, -58909, 40122, -77243, -10736, -14812, -34091, 48704, 29851, -12198, -29609, -24805], 448370466, -1),
    ([-98298, 38829, -88464, -9912, -59526, 707, 28719, -32366, 93318, 58830, -95398, -92307, -39097, 96999, -20882, 86347, -89237, 58868, -56736, -54839, 71453, 21766, -71603, -13030, 25962, -46172, 75076, 11512, -43476, 33587, 90812, -81692, -35171, 59975, 67883, -14811, 13152, -15447, 32966, -86608, -96143, -29174, -69635, 96929, -99449, -61347, 43378, -38777, 61418, 28242, -24875, -40924, -59312, 732, -83760, 13236, -59303, 13208, -75068, -14625, 10980, -85688, 22716, -43792, 84396, -12086, 61410, 87783, -11179, -79955, -80372, -88834], 793740541, -1),
    ([12776, 27691, 29759, -62340, -51437, -29956, -28725, -93430, -53960, -30193, 92044, -20605, 19817, 56183, 93778, -69925, 48077, -78205, 94788, -10201, -63305, -79585, -87900, 78147, 63691, 90320, -47361, 36124, -20764, -91357, -33948, -30450, -59798, 38335, -70835, 9266, 51494, -14214, -63238, 76326, -53439, -86351, 65107, 66579, -80549, 30897, 69577, 88066, -72761, 56456, -25152, 88291, 12300, -26123, 34326, 29229, 29008, -92124, -83611, -63938, 79248, 3708, -88231, -1587, -33404, 85376, -95588, -46041, -30557, -8950, 63559, 92512, -72638, 94379, 35175, 82564, -50689, 51539, 15953, -77324, -21395, 9287, -67970, 762, 81830], 464245513, -1),
    ([-64884, 253, 33568, -57451, 38294, 13229, -62963, -12227, 63436, -11374, 49060, -45139, 47013, -54765, 59727, -6761, -59600, -40939, -83172, -26374, -94383, 501, -60313, -67419, 55694, 81097, -41143], 621812732, -1),
    ([55215, -2168, 57298, 82421, 25373, -11245, 65455, 79799, -29798, -72456, -92224, 58058, -40595, 1373, -85152, -90479, 77468, -43234, -59698, -8631, 30545, -26852, -31653, 32138, -84282, -38186, -58868, -8255, 27444, -82098, 91736, 47619, -77882, 79244, -70338, 86467, 40608, -67022, -22885, 70676, -63868, -4539, 56898, -94915, -35143, -54869, 77061, 25574, -61537, -56042, -20495, 86527, 23628], 340464232, -1),
    ([6159, 68976, 77140, 34959, -40345, -78825, -42296, -21349, 47702, -79178, 21802, 28400, -41788, 9029, 70597, -72945, 45780, 14134, -50368, 75852, 54265, -2919, -66245, 77791, 16046, 28499, 15471, 73746, -94300, -78122, 65540, 91264, -68517, -86041, 74891, 12714, 70762, 28450, 80715, 42417, 4484, -38220, 55383, -31513, -96289, 1023, 98588, -44677, -25152, 74910, 46868, 66367, 43250, -54882, -7335, 37446, 64726], 607685857, -1),
    ([11117, 54943, -10163, -15204, -85861, -36492, 70919, -84539, -72505, 28667, 37365, -99083, 61028, 74212, -67729, -24558, 98223, -22963, 38745, 71546, 99593, 13350, -56902, 68698, -49913, -95842, 92124, -86157, -99465, -26489, 58763, 33591, 28364, 26469, -35131, 61462, -45868, 99314, 94358, -44590, 96411, -85512, -20488, 45962, -95923, 36872, 43154, -95256, -68812, -98432, -54311, 45751, -47749, -32668, -42722, -1342, 17465, 8845, -8917, 85323, 76732, -10286, -30469, 34314, -11671, -66406, -69450, 99201, 32018, -72760], 591493640, -1),
    ([-59454, -22868], 281520687, -1),
    ([94224, 46864, 93511, -2639, 17523], 642041862, -1),
    ([14210, 7271, -79196, -96005, 40583, 51500, -70594, -82581, 62622, -91006, 2197, -38483, -42303, 39085, 18455, 15508, 73263, 62203, 90620, 26773, 24279, -10985, 88424, 30655, 40303, 77217, -8901, 37327, -58491, 13826], 18383021,-1),
]


sol = Solution()
total_time = 0.0

for nums, k, expected in test_cases:
    start_time = time.perf_counter()
    result = sol.shortestSubarray(nums, k)
    end_time = time.perf_counter()
    execution_time = end_time - start_time
    total_time += execution_time
    assert result == expected, f"Test failed for nums and k({nums}, {k}). Expected {expected}, got {result}"
    print(f"Test passed for nums and k=({nums}, {k}). Execution time: {execution_time:.12f} seconds")

print(f"\nAll test cases passed successfully!")
print(f"Total execution time for all test cases: {total_time:.12f} seconds")
